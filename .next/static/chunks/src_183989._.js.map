{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/storage/db.ts"],"sourcesContent":["import { openDB } from 'idb';\r\nimport { nanoid } from 'nanoid';\r\nimport type { Message, Conversation, ModelContext } from './types';\r\n\r\nexport class StorageManager {\r\n  private async initDB() {\r\n    return openDB('chat-db', 1, {\r\n      upgrade(db) {\r\n        // Create stores if they don't exist\r\n        if (!db.objectStoreNames.contains('conversations')) {\r\n          db.createObjectStore('conversations', { keyPath: 'id' });\r\n        }\r\n        if (!db.objectStoreNames.contains('messages')) {\r\n          const messageStore = db.createObjectStore('messages', { keyPath: 'id' });\r\n          messageStore.createIndex('byConversation', 'conversationId');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveMessage(message: Message) {\r\n    const db = await this.initDB();\r\n    await db.put('messages', message);\r\n    \r\n    // Update conversation timestamp\r\n    const tx = db.transaction('conversations', 'readwrite');\r\n    const store = tx.objectStore('conversations');\r\n    const conversation = await store.get(message.conversationId);\r\n    \r\n    if (conversation) {\r\n      conversation.updatedAt = Date.now();\r\n      await store.put(conversation);\r\n    }\r\n  }\r\n\r\n  async getMessages(conversationId: string): Promise<Message[]> {\r\n    const db = await this.initDB();\r\n    return db.getAllFromIndex('messages', 'byConversation', conversationId);\r\n  }\r\n\r\n  async getConversationMessages(conversationId: string): Promise<Message[]> {\r\n    return this.getMessages(conversationId);\r\n  }\r\n\r\n  async createConversation(title: string, models: { responder: string; listener: string }): Promise<string> {\r\n    const db = await this.initDB();\r\n    const conversation: Conversation = {\r\n      id: nanoid(),\r\n      title,\r\n      models: {\r\n        responder: models.responder,\r\n        listener: models.listener,\r\n        contexts: {\r\n          [models.responder]: {\r\n            understanding: '',\r\n            lastUpdated: Date.now(),\r\n            messagesSeen: []\r\n          },\r\n          [models.listener]: {\r\n            understanding: '',\r\n            lastUpdated: Date.now(),\r\n            messagesSeen: []\r\n          }\r\n        }\r\n      },\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now()\r\n    };\r\n    await db.put('conversations', conversation);\r\n    return conversation.id;\r\n  }\r\n\r\n  async updateModelContext(\r\n    conversationId: string,\r\n    modelName: string,\r\n    context: Partial<ModelContext>\r\n  ): Promise<void> {\r\n    const db = await this.initDB();\r\n    const tx = db.transaction('conversations', 'readwrite');\r\n    const store = tx.objectStore('conversations');\r\n    const conversation = await store.get(conversationId);\r\n\r\n    if (!conversation) {\r\n      throw new Error(`Conversation ${conversationId} not found`);\r\n    }\r\n\r\n    // Update the specific model's context\r\n    conversation.models.contexts[modelName] = {\r\n      ...conversation.models.contexts[modelName],\r\n      ...context,\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    await store.put(conversation);\r\n  }\r\n}\r\n\r\nexport const storage = new StorageManager();\r\n\r\n// Re-export types\r\nexport type { Message, Conversation, ModelContext };\r\n"],"names":[],"mappings":";;;;;;;;;AACA;;;AAGO,MAAM;IACX,MAAc,SAAS;QACrB,OAAO,OAAO,WAAW,GAAG;YAC1B,SAAQ,EAAE;gBACR,oCAAoC;gBACpC,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,kBAAkB;oBAClD,GAAG,iBAAiB,CAAC,iBAAiB;wBAAE,SAAS;oBAAK;gBACxD;gBACA,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,aAAa;oBAC7C,MAAM,eAAe,GAAG,iBAAiB,CAAC,YAAY;wBAAE,SAAS;oBAAK;oBACtE,aAAa,WAAW,CAAC,kBAAkB;gBAC7C;YACF;QACF;IACF;IAEA,MAAM,YAAY,OAAgB,EAAE;QAClC,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,GAAG,GAAG,CAAC,YAAY;QAEzB,gCAAgC;QAChC,MAAM,KAAK,GAAG,WAAW,CAAC,iBAAiB;QAC3C,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,eAAe,MAAM,MAAM,GAAG,CAAC,QAAQ,cAAc;QAE3D,IAAI,cAAc;YAChB,aAAa,SAAS,GAAG,KAAK,GAAG;YACjC,MAAM,MAAM,GAAG,CAAC;QAClB;IACF;IAEA,MAAM,YAAY,cAAsB,EAAsB;QAC5D,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,OAAO,GAAG,eAAe,CAAC,YAAY,kBAAkB;IAC1D;IAEA,MAAM,wBAAwB,cAAsB,EAAsB;QACxE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IAEA,MAAM,mBAAmB,KAAa,EAAE,MAA+C,EAAmB;QACxG,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,eAA6B;YACjC,IAAI,CAAA,GAAA,gNAAA,CAAA,SAAM,AAAD;YACT;YACA,QAAQ;gBACN,WAAW,OAAO,SAAS;gBAC3B,UAAU,OAAO,QAAQ;gBACzB,UAAU;oBACR,CAAC,OAAO,SAAS,CAAC,EAAE;wBAClB,eAAe;wBACf,aAAa,KAAK,GAAG;wBACrB,cAAc,EAAE;oBAClB;oBACA,CAAC,OAAO,QAAQ,CAAC,EAAE;wBACjB,eAAe;wBACf,aAAa,KAAK,GAAG;wBACrB,cAAc,EAAE;oBAClB;gBACF;YACF;YACA,WAAW,KAAK,GAAG;YACnB,WAAW,KAAK,GAAG;QACrB;QACA,MAAM,GAAG,GAAG,CAAC,iBAAiB;QAC9B,OAAO,aAAa,EAAE;IACxB;IAEA,MAAM,mBACJ,cAAsB,EACtB,SAAiB,EACjB,OAA8B,EACf;QACf,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,KAAK,GAAG,WAAW,CAAC,iBAAiB;QAC3C,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,eAAe,MAAM,MAAM,GAAG,CAAC;QAErC,IAAI,CAAC,cAAc;YACjB,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,eAAe,UAAU,CAAC;QAC5D;QAEA,sCAAsC;QACtC,aAAa,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG;YACxC,GAAG,aAAa,MAAM,CAAC,QAAQ,CAAC,UAAU;YAC1C,GAAG,OAAO;YACV,aAAa,KAAK,GAAG;QACvB;QAEA,MAAM,MAAM,GAAG,CAAC;IAClB;AACF;AAEO,MAAM,UAAU,IAAI"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/llm/test-sequential-chat.ts"],"sourcesContent":["interface Provider {\r\n  name: string;\r\n  endpoint: string;\r\n  model: string;\r\n  context?: number[] | null;\r\n  messages?: Array<{ role: string; content: string }>;\r\n}\r\n\r\ninterface ChatHistory {\r\n  provider: string;\r\n  message: string;\r\n  response: string;\r\n  timestamp: string;\r\n}\r\n\r\nexport class SequentialChat {\r\n  private ollamaProvider: Provider;\r\n  private lmStudioProvider: Provider;\r\n  private currentProvider: Provider | null;\r\n  private history: ChatHistory[];\r\n\r\n  constructor() {\r\n    this.ollamaProvider = {\r\n      name: 'Ollama',\r\n      endpoint: 'http://127.0.0.1:11434',\r\n      model: 'deepseek-r1:14b',\r\n      context: null\r\n    };\r\n    \r\n    this.lmStudioProvider = {\r\n      name: 'LM Studio',\r\n      endpoint: 'http://127.0.0.1:1234/v1',\r\n      model: 'qwen2.5-vl-7b-instruct',\r\n      messages: []\r\n    };\r\n    \r\n    this.currentProvider = null;\r\n    this.history = [];\r\n  }\r\n\r\n  async switchProvider(providerName: 'ollama' | 'lmstudio'): Promise<void> {\r\n    let newProvider: Provider;\r\n    if (providerName === 'ollama') {\r\n      newProvider = this.ollamaProvider;\r\n    } else if (providerName === 'lmstudio') {\r\n      newProvider = this.lmStudioProvider;\r\n    } else {\r\n      throw new Error('Invalid provider name');\r\n    }\r\n\r\n    // Check if the provider is available\r\n    const isAvailable = await this.checkAvailability(newProvider);\r\n    if (!isAvailable) {\r\n      throw new Error(`${newProvider.name} is not available`);\r\n    }\r\n\r\n    this.currentProvider = newProvider;\r\n    console.log(`Switched to ${this.currentProvider.name} provider`);\r\n  }\r\n\r\n  private async checkAvailability(provider: Provider): Promise<boolean> {\r\n    try {\r\n      if (provider.name === 'Ollama') {\r\n        const response = await fetch(`${provider.endpoint}/api/version`);\r\n        const data = await response.json();\r\n        return !!data.version;\r\n      } else {\r\n        const response = await fetch(`${provider.endpoint}/models`);\r\n        const data = await response.json();\r\n        return Array.isArray(data.data) && data.data.length > 0;\r\n      }\r\n    } catch (error) {\r\n      console.error(`${provider.name} availability check failed:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async chat(message: string): Promise<string> {\r\n    if (!this.currentProvider) {\r\n      throw new Error('No provider selected');\r\n    }\r\n\r\n    console.log(`\\nUser: ${message}`);\r\n\r\n    try {\r\n      let response: string;\r\n      if (this.currentProvider.name === 'Ollama') {\r\n        response = await this.ollamaChat(message);\r\n      } else {\r\n        response = await this.lmStudioChat(message);\r\n      }\r\n\r\n      console.log(`${this.currentProvider.name}: ${response}\\n`);\r\n\r\n      this.history.push({\r\n        provider: this.currentProvider.name,\r\n        message,\r\n        response,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`Error from ${this.currentProvider.name}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async ollamaChat(message: string): Promise<string> {\r\n    const response = await fetch(`${this.ollamaProvider.endpoint}/api/generate`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        model: this.ollamaProvider.model,\r\n        prompt: message,\r\n        stream: false,\r\n        context: this.ollamaProvider.context,\r\n        options: {\r\n          temperature: 0.7,\r\n          num_predict: 1024,\r\n          top_k: 40,\r\n          top_p: 0.9,\r\n          repeat_penalty: 1.1,\r\n        }\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (data.context) {\r\n      this.ollamaProvider.context = data.context;\r\n    }\r\n    return data.response;\r\n  }\r\n\r\n  private async lmStudioChat(message: string): Promise<string> {\r\n    this.lmStudioProvider.messages?.push({ role: 'user', content: message });\r\n\r\n    const response = await fetch(`${this.lmStudioProvider.endpoint}/chat/completions`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        model: this.lmStudioProvider.model,\r\n        messages: this.lmStudioProvider.messages,\r\n        stream: false,\r\n        temperature: 0.7,\r\n        max_tokens: 1024,\r\n        top_k: 40,\r\n        top_p: 0.9,\r\n        repeat_penalty: 1.1\r\n      })\r\n    });\r\n\r\n    const data = await response.json();\r\n    const assistantMessage = data.choices[0].message;\r\n    this.lmStudioProvider.messages?.push(assistantMessage);\r\n    return assistantMessage.content;\r\n  }\r\n\r\n  clearContext(): void {\r\n    this.ollamaProvider.context = null;\r\n    this.lmStudioProvider.messages = [];\r\n    this.history = [];\r\n    console.log('Context cleared for both providers');\r\n  }\r\n\r\n  getHistory(): { messages: ChatHistory[]; summary: { totalMessages: number; byProvider: Record<string, number> } } {\r\n    return {\r\n      messages: this.history,\r\n      summary: {\r\n        totalMessages: this.history.length,\r\n        byProvider: this.history.reduce((acc: Record<string, number>, msg) => {\r\n          acc[msg.provider] = (acc[msg.provider] || 0) + 1;\r\n          return acc;\r\n        }, {})\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Test function defined at module level\r\nexport async function runTest(): Promise<void> {\r\n  console.log('Starting sequential chat test...\\n');\r\n  const chat = new SequentialChat();\r\n\r\n  try {\r\n    // Test Ollama\r\n    console.log('Testing Ollama provider...');\r\n    await chat.switchProvider('ollama');\r\n    await chat.chat('What is quantum computing?');\r\n\r\n    // Test LM Studio\r\n    console.log('\\nTesting LM Studio provider...');\r\n    await chat.switchProvider('lmstudio');\r\n    await chat.chat('Can you elaborate on quantum entanglement?');\r\n\r\n    // Switch back to Ollama\r\n    console.log('\\nSwitching back to Ollama provider...');\r\n    await chat.switchProvider('ollama');\r\n    await chat.chat('How does quantum cryptography work?');\r\n\r\n    // Get conversation history\r\n    const history = chat.getHistory();\r\n    console.log('\\nTest completed successfully');\r\n    console.log('\\nChat history summary:');\r\n    console.log(JSON.stringify(history.summary, null, 2));\r\n    console.log('\\nDetailed chat history:');\r\n    console.log(JSON.stringify(history.messages, null, 2));\r\n  } catch (error: any) {\r\n    console.error('\\nTest failed:', error.message);\r\n    if (error.stack) {\r\n      console.error('\\nStack trace:', error.stack);\r\n    }\r\n  } finally {\r\n    chat.clearContext();\r\n  }\r\n}\r\n\r\n// Run test if this is the main module\r\nif (require.main === module) {\r\n  runTest().catch(console.error);\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/chat/message-handler.ts"],"sourcesContent":["import { Conversation, Message, ModelContext } from '../storage/types';\r\nimport { StorageManager } from '../storage/db';\r\nimport { SequentialChat } from '../llm/test-sequential-chat';\r\n\r\nexport class MessageHandler {\r\n  private sequentialChat: SequentialChat;\r\n\r\n  constructor(\r\n    private storage: StorageManager\r\n  ) {\r\n    this.sequentialChat = new SequentialChat();\r\n    // Start with Ollama as the default provider\r\n    this.sequentialChat.switchProvider('ollama').catch(error => {\r\n      console.error('Failed to initialize Ollama provider:', error);\r\n    });\r\n  }\r\n\r\n  async processNewMessage(\r\n    conversation: Conversation,\r\n    content: string,\r\n    role: 'user' | 'assistant'\r\n  ) {\r\n    try {\r\n      // First, save the new message\r\n      const message = await this.saveMessage(conversation.id, content, role);\r\n\r\n      // If this is a user message, we need to:\r\n      // 1. Update the listener's context (if LM Studio is available)\r\n      // 2. Get a response from the responder\r\n      if (role === 'user') {\r\n        try {\r\n          // Try to update listener context with LM Studio\r\n          try {\r\n            await this.sequentialChat.switchProvider('lmstudio');\r\n            await this.updateListenerContext(conversation, message);\r\n          } catch (error) {\r\n            console.warn('LM Studio not available for context update, continuing with Ollama only');\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to update listener context:', error);\r\n          // Continue even if listener update fails\r\n        }\r\n        \r\n        // Ensure we're using Ollama for the response\r\n        await this.sequentialChat.switchProvider('ollama');\r\n        const response = await this.getResponderReply(conversation, message);\r\n        \r\n        // Save the response as a new message\r\n        await this.saveMessage(conversation.id, response, 'assistant');\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error in processNewMessage:', error);\r\n      throw new Error(`Failed to process message: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  private async saveMessage(\r\n    conversationId: string,\r\n    content: string,\r\n    role: 'user' | 'assistant' | 'system'\r\n  ): Promise<Message> {\r\n    const message: Message = {\r\n      id: Date.now().toString(),\r\n      conversationId,\r\n      role,\r\n      content,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    await this.storage.saveMessage(message);\r\n    return message;\r\n  }\r\n\r\n  private async updateListenerContext(\r\n    conversation: Conversation,\r\n    newMessage: Message\r\n  ) {\r\n    if (!conversation.models) {\r\n      throw new Error('Models not configured for conversation');\r\n    }\r\n\r\n    const listenerModel = conversation.models.listener;\r\n    if (!listenerModel) {\r\n      throw new Error('Listener model not configured for conversation');\r\n    }\r\n\r\n    // Ensure contexts object exists and is properly initialized\r\n    if (!conversation.models.contexts || typeof conversation.models.contexts !== 'object') {\r\n      conversation.models.contexts = {};\r\n    }\r\n\r\n    // Initialize or get the current context\r\n    let currentContext = conversation.models.contexts[listenerModel];\r\n    if (!currentContext) {\r\n      currentContext = {\r\n        understanding: \"Initial conversation context.\",\r\n        lastUpdated: Date.now(),\r\n        messagesSeen: []\r\n      };\r\n      conversation.models.contexts[listenerModel] = currentContext;\r\n    }\r\n\r\n    try {\r\n      const prompt = `You are observing a conversation to build your understanding. \r\n      Your current understanding: ${currentContext.understanding}\r\n      \r\n      New message: ${newMessage.content}\r\n      \r\n      Update your understanding of the conversation, maintaining your unique perspective.\r\n      Focus on the key points that would be relevant if you need to respond later.`;\r\n\r\n      const response = await this.sequentialChat.chat(prompt);\r\n\r\n      // Update the listener's context in storage\r\n      await this.storage.updateModelContext(\r\n        conversation.id,\r\n        listenerModel,\r\n        {\r\n          understanding: response,\r\n          lastUpdated: Date.now(),\r\n          messagesSeen: [...currentContext.messagesSeen, parseInt(newMessage.id)]\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to update listener context:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async getResponderReply(\r\n    conversation: Conversation,\r\n    message: Message\r\n  ): Promise<string> {\r\n    try {\r\n      if (!conversation.models) {\r\n        throw new Error('Models not configured for conversation');\r\n      }\r\n\r\n      const responderModel = conversation.models.responder;\r\n      if (!responderModel) {\r\n        throw new Error('Responder model not configured for conversation');\r\n      }\r\n\r\n      // Get all messages in the conversation\r\n      const conversationMessages = await this.storage.getConversationMessages(conversation.id);\r\n      \r\n      // Build the conversation history as a single prompt\r\n      const history = conversationMessages\r\n        .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)\r\n        .join('\\n');\r\n      \r\n      const prompt = `You are ${responderModel}, an AI assistant. Be helpful, clear, and concise in your responses.\r\n      \r\nPrevious conversation:\r\n${history}\r\n\r\nUser: ${message.content}`;\r\n\r\n      const response = await this.sequentialChat.chat(prompt);\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Error in getResponderReply:', error);\r\n      throw new Error(`Failed to get AI response: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async addSystemMessage(conversationId: string, content: string): Promise<Message> {\r\n    return this.saveMessage(conversationId, content, 'system');\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport function generateId(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,4NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,yLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,SAAS,CAAC;QACvE,MAAM,IAAI,KAAK,MAAM,KAAK,KAAK;QAC/B,MAAM,IAAI,MAAM,MAAM,IAAK,IAAI,MAAM;QACrC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'default' | 'outline' | 'ghost';\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant = 'default', ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\r\n          {\r\n            \"bg-primary text-primary-foreground hover:bg-primary/90\": variant === 'default',\r\n            \"border border-input hover:bg-accent hover:text-accent-foreground\": variant === 'outline',\r\n            \"hover:bg-accent hover:text-accent-foreground\": variant === 'ghost',\r\n          },\r\n          \"h-10 py-2 px-4\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,uBAAS,oUAAM,UAAU,MAC7B,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAO,EAAE;IAC7C,qBACE,mWAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,wQACA;YACE,0DAA0D,YAAY;YACtE,oEAAoE,YAAY;YAChF,gDAAgD,YAAY;QAC9D,GACA,kBACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAGF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,oUAAM,UAAU,MAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,mWAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAGF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Alert = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\r\n>(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\nconst AlertTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,8OAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,oUAAM,UAAU,MAG5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,mWAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,oUAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,mWAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,oUAAM,UAAU,OAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,mWAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/ollama/test-connection.ts"],"sourcesContent":["export async function testOllamaConnection() {\r\n  try {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\r\n\r\n    const response = await fetch('/api/test-connection', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      },\r\n      signal: controller.signal\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n    \r\n    const data = await response.json();\r\n    console.log('Ollama test response:', data);\r\n    \r\n    if (!response.ok || !data.success) {\r\n      throw new Error(data.error || `Connection test failed: ${response.statusText}`);\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      deepseek: data.deepseek,\r\n      qwen: data.qwen\r\n    };\r\n  } catch (error: any) {\r\n    console.error('Ollama connection test failed:', error);\r\n    \r\n    if (error.name === 'AbortError') {\r\n      throw new Error('Connection test timed out. Please check if Ollama server is responding.');\r\n    }\r\n    \r\n    throw new Error(error.message || 'Failed to connect to Ollama server');\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAO,eAAe;IACpB,IAAI;QACF,MAAM,aAAa,IAAI;QACvB,MAAM,YAAY,WAAW,IAAM,WAAW,KAAK,IAAI,QAAQ,oBAAoB;QAEnF,MAAM,WAAW,MAAM,MAAM,wBAAwB;YACnD,QAAQ;YACR,SAAS;gBACP,UAAU;YACZ;YACA,QAAQ,WAAW,MAAM;QAC3B;QAEA,aAAa;QAEb,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,yBAAyB;QAErC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,OAAO,EAAE;YACjC,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI,CAAC,wBAAwB,EAAE,SAAS,UAAU,EAAE;QAChF;QAEA,OAAO;YACL,SAAS;YACT,UAAU,KAAK,QAAQ;YACvB,MAAM,KAAK,IAAI;QACjB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,kCAAkC;QAEhD,IAAI,MAAM,IAAI,KAAK,cAAc;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;IACnC;AACF"}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 673, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/ollama/connection.ts"],"sourcesContent":["import { testOllamaConnection } from './test-connection';\r\n\r\nexport async function verifyOllamaSetup(): Promise<{ success: boolean; error?: string }> {\r\n  try {\r\n    const result = await testOllamaConnection();\r\n    console.log('Setup verification succeeded:', result);\r\n    return { success: true };\r\n  } catch (error: any) {\r\n    console.error('Setup verification failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Failed to connect to Ollama server'\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,6IAAA,CAAA,uBAAoB,AAAD;QACxC,QAAQ,GAAG,CAAC,iCAAiC;QAC7C,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YACL,SAAS;YACT,OAAO,MAAM,OAAO,IAAI;QAC1B;IACF;AACF"}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 702, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/conversation-list.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport type { Conversation } from '../lib/storage/types';\r\n\r\nexport function ConversationList({ \r\n  conversations, \r\n  currentId, \r\n  onSelect \r\n}: { \r\n  conversations: Conversation[];\r\n  currentId: string;\r\n  onSelect: (id: string) => void;\r\n}) {\r\n  return (\r\n    <div className=\"border-r w-64 p-4\">\r\n      <div className=\"space-y-2\">\r\n        {conversations.map(conversation => {\r\n          const activeModel = conversation.models.responder;\r\n          const timestamp = new Date(conversation.updatedAt).toLocaleDateString();\r\n          \r\n          return (\r\n            <button\r\n              key={conversation.id}\r\n              onClick={() => onSelect(conversation.id)}\r\n              className={`w-full text-left p-3 rounded-lg ${\r\n                conversation.id === currentId \r\n                  ? 'bg-blue-50 border-blue-200' \r\n                  : 'hover:bg-gray-50'\r\n              }`}\r\n            >\r\n              <div className=\"font-medium\">{conversation.title}</div>\r\n              <div className=\"text-sm text-gray-500\">\r\n                Responder: {activeModel}\r\n              </div>\r\n              <div className=\"text-xs text-gray-400\">{timestamp}</div>\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAIO,SAAS,iBAAiB,EAC/B,aAAa,EACb,SAAS,EACT,QAAQ,EAKT;IACC,qBACE,mWAAC;QAAI,WAAU;kBACb,cAAA,mWAAC;YAAI,WAAU;sBACZ,cAAc,GAAG,CAAC,CAAA;gBACjB,MAAM,cAAc,aAAa,MAAM,CAAC,SAAS;gBACjD,MAAM,YAAY,IAAI,KAAK,aAAa,SAAS,EAAE,kBAAkB;gBAErE,qBACE,mWAAC;oBAEC,SAAS,IAAM,SAAS,aAAa,EAAE;oBACvC,WAAW,CAAC,gCAAgC,EAC1C,aAAa,EAAE,KAAK,YAChB,+BACA,oBACJ;;sCAEF,mWAAC;4BAAI,WAAU;sCAAe,aAAa,KAAK;;;;;;sCAChD,mWAAC;4BAAI,WAAU;;gCAAwB;gCACzB;;;;;;;sCAEd,mWAAC;4BAAI,WAAU;sCAAyB;;;;;;;mBAZnC,aAAa,EAAE;;;;;YAe1B;;;;;;;;;;;AAIR;KArCgB"}},
    {"offset": {"line": 771, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/model-role-switcher.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Button } from \"./button\";\r\nimport { ArrowUpDown } from 'lucide-react';\r\n\r\n// This component will show which model is in which role and allow switching\r\nexport function ModelRoleSwitcher({ \r\n  models,\r\n  onSwitch,\r\n  disabled\r\n}: {\r\n  models: { responder: string; listener: string };\r\n  onSwitch: () => void;\r\n  disabled: boolean;\r\n}) {\r\n  return (\r\n    <div className=\"flex items-center gap-4 p-4 border-b\">\r\n      {/* The active responder is highlighted */}\r\n      <div className=\"flex-1 p-3 rounded-lg bg-blue-50 border border-blue-200\">\r\n        <div className=\"text-sm font-medium\">Responder</div>\r\n        <div className=\"text-blue-600\">{models.responder}</div>\r\n      </div>\r\n\r\n      {/* Switch button with clear visual feedback */}\r\n      <Button \r\n        variant=\"outline\"\r\n        onClick={onSwitch}\r\n        disabled={disabled}\r\n        title=\"Switch model roles\"\r\n        className=\"h-10 w-10 p-0\"\r\n      >\r\n        <ArrowUpDown className=\"h-4 w-4\" />\r\n      </Button>\r\n\r\n      {/* The listener is shown in a more subtle style */}\r\n      <div className=\"flex-1 p-3 rounded-lg bg-gray-50 border border-gray-200\">\r\n        <div className=\"text-sm font-medium\">Listener</div>\r\n        <div className=\"text-gray-600\">{models.listener}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAMO,SAAS,kBAAkB,EAChC,MAAM,EACN,QAAQ,EACR,QAAQ,EAKT;IACC,qBACE,mWAAC;QAAI,WAAU;;0BAEb,mWAAC;gBAAI,WAAU;;kCACb,mWAAC;wBAAI,WAAU;kCAAsB;;;;;;kCACrC,mWAAC;wBAAI,WAAU;kCAAiB,OAAO,SAAS;;;;;;;;;;;;0BAIlD,mWAAC,qIAAA,CAAA,SAAM;gBACL,SAAQ;gBACR,SAAS;gBACT,UAAU;gBACV,OAAM;gBACN,WAAU;0BAEV,cAAA,mWAAC,+SAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;;;;;;0BAIzB,mWAAC;gBAAI,WAAU;;kCACb,mWAAC;wBAAI,WAAU;kCAAsB;;;;;;kCACrC,mWAAC;wBAAI,WAAU;kCAAiB,OAAO,QAAQ;;;;;;;;;;;;;;;;;;AAIvD;KAnCgB"}},
    {"offset": {"line": 872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/chat-panel.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport { storage } from '../lib/storage/db';\r\nimport { MessageHandler } from '../lib/chat/message-handler';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { Alert, AlertTitle, AlertDescription } from './ui/alert';\r\nimport { verifyOllamaSetup } from '../lib/ollama/connection';\r\nimport { ConversationList } from './conversation-list';\r\nimport { ModelRoleSwitcher } from './ui/model-role-switcher';\r\nimport type { Message, Conversation } from '../lib/storage/types';\r\n\r\nexport function ChatPanel() {\r\n  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null);\r\n  const [conversations, setConversations] = useState<Conversation[]>([]);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isServerConnected, setIsServerConnected] = useState(false);\r\n  const [lastConnectionCheck, setLastConnectionCheck] = useState(0);\r\n\r\n  // Create a stable instance of MessageHandler\r\n  const messageHandler = useMemo(() => new MessageHandler(storage), []);\r\n\r\n  // Check Ollama server connection and verify model functionality\r\n  useEffect(() => {\r\n    async function verifyConnection() {\r\n      // Only check if it's been more than 10 seconds since the last check\r\n      const now = Date.now();\r\n      if (now - lastConnectionCheck < 10000) {\r\n        return;\r\n      }\r\n      \r\n      setLastConnectionCheck(now);\r\n      \r\n      try {\r\n        const result = await verifyOllamaSetup();\r\n        setIsServerConnected(result.success);\r\n        \r\n        if (!result.success) {\r\n          setError(result.error || 'Unable to connect to Ollama server or model test failed. Please ensure Ollama is running and the model is properly installed.');\r\n        } else {\r\n          setError(null);\r\n        }\r\n      } catch (error: any) {\r\n        setIsServerConnected(false);\r\n        setError(error.message || 'Ollama server not running or model test failed. Please start Ollama and ensure the model is installed.');\r\n      }\r\n    }\r\n    \r\n    verifyConnection();\r\n    // Check connection every minute\r\n    const interval = setInterval(verifyConnection, 60000);\r\n    return () => clearInterval(interval);\r\n  }, [lastConnectionCheck]);\r\n\r\n  // Load all conversations on mount\r\n  useEffect(() => {\r\n    async function loadConversations() {\r\n      try {\r\n        const allConversations = await storage.getConversations();\r\n        setConversations(allConversations);\r\n        \r\n        // If we have conversations, load the most recent one\r\n        if (allConversations.length > 0) {\r\n          await loadConversation(allConversations[0].id);\r\n        } else {\r\n          // Create a new conversation if none exist\r\n          const newId = await storage.createConversation('New Chat', {\r\n            responder: 'deepseek-r1:14b',\r\n            listener: 'qwen2.5-coder:latest'\r\n          });\r\n          const conversations = await storage.getConversations();\r\n          setConversations(conversations);\r\n          const newConversation = conversations.find(conv => conv.id === newId);\r\n          if (newConversation) {\r\n            setCurrentConversation(newConversation);\r\n            setMessages([]);\r\n          }\r\n        }\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to initialize chat';\r\n      console.error(errorMessage, error);\r\n      setError(errorMessage);\r\n      }\r\n    }\r\n    \r\n    loadConversations();\r\n  }, []);\r\n\r\n  async function loadConversation(id: string) {\r\n    try {\r\n      const conversation = await storage.getConversation(id);\r\n      if (!conversation) {\r\n        throw new Error('Conversation not found');\r\n      }\r\n      \r\n      const messages = await storage.getConversationMessages(id);\r\n      setCurrentConversation(conversation);\r\n      setMessages(messages);\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to load conversation';\r\n      console.error(errorMessage, error);\r\n      setError(errorMessage);\r\n    }\r\n  }\r\n\r\n  async function handleRoleSwitch() {\r\n    if (!currentConversation || isLoading) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // Add a system message to mark the switch\r\n      const switchMessage = await messageHandler.addSystemMessage(\r\n        currentConversation.id,\r\n        `Switching roles - ${currentConversation.models.listener} is now responding`\r\n      );\r\n      \r\n      // Update the conversation roles in storage\r\n      await storage.switchModelRoles(currentConversation.id);\r\n      \r\n      // Get the updated conversation\r\n      const updatedConversation = await storage.getConversation(currentConversation.id);\r\n      setCurrentConversation(updatedConversation);\r\n      \r\n      // Update messages to include the switch notification\r\n      setMessages(prev => [...prev, switchMessage]);\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to switch roles';\r\n      console.error(errorMessage, error);\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  async function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!input.trim() || isLoading || !currentConversation || !isServerConnected) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null); // Clear any previous errors\r\n    \r\n    try {\r\n      // First save the user's message\r\n      const userMessage: Message = {\r\n        id: Date.now().toString(),\r\n        conversationId: currentConversation.id,\r\n        role: 'user',\r\n        content: input,\r\n        timestamp: Date.now()\r\n      };\r\n      await storage.saveMessage(userMessage);\r\n      setMessages(prev => [...prev, userMessage]);\r\n      setInput(''); // Clear input after sending\r\n\r\n      // Then process the message and get AI response\r\n      try {\r\n        await messageHandler.processNewMessage(currentConversation, input, 'user');\r\n        // Reload messages to get the AI response\r\n        const updatedMessages = await storage.getConversationMessages(currentConversation.id);\r\n        setMessages(updatedMessages);\r\n      } catch (error: any) {\r\n        // If the AI response fails, show the error but keep the user's message\r\n        const errorMessage = error.message || 'Failed to get AI response';\r\n        console.error(errorMessage, error);\r\n        setError(errorMessage);\r\n        \r\n        // Add a system message to indicate the error\r\n        const errorSystemMessage: Message = {\r\n          id: Date.now().toString(),\r\n          conversationId: currentConversation.id,\r\n          role: 'system',\r\n          content: `Error: ${errorMessage}. Please try again.`,\r\n          timestamp: Date.now()\r\n        };\r\n        await storage.saveMessage(errorSystemMessage);\r\n        setMessages(prev => [...prev, errorSystemMessage]);\r\n      }\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to process message';\r\n      console.error(errorMessage, error);\r\n      setError(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-full\">\r\n      <ConversationList\r\n        conversations={conversations}\r\n        currentId={currentConversation?.id || ''}\r\n        onSelect={loadConversation}\r\n      />\r\n      <div className=\"flex flex-col flex-1 relative\">\r\n        {currentConversation && (\r\n          <ModelRoleSwitcher\r\n            models={currentConversation.models}\r\n            onSwitch={handleRoleSwitch}\r\n            disabled={isLoading}\r\n          />\r\n        )}\r\n        <div className=\"flex-1 overflow-auto p-4 space-y-4\">\r\n          {error && (\r\n            <Alert variant=\"destructive\" className=\"mb-4\">\r\n              <AlertTitle>Error</AlertTitle>\r\n              <AlertDescription>\r\n                {error}\r\n                {error.includes('deepseek-r1:14b') && (\r\n                  <div className=\"mt-2\">\r\n                    <p>Run this command to load the DeepSeek model:</p>\r\n                    <pre className=\"bg-gray-800 text-white p-2 mt-1 rounded\">ollama pull deepseek-r1:14b</pre>\r\n                  </div>\r\n                )}\r\n                {error.includes('qwen2.5-coder') && (\r\n                  <div className=\"mt-2\">\r\n                    <p>Run this command to load the Qwen model:</p>\r\n                    <pre className=\"bg-gray-800 text-white p-2 mt-1 rounded\">ollama pull qwen2.5-coder</pre>\r\n                  </div>\r\n                )}\r\n                {error.includes('not running') && (\r\n                  <p className=\"mt-2\">Make sure Ollama is installed and running on your system.</p>\r\n                )}\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n          {messages.map((message) => (\r\n            <div\r\n              key={message.id}\r\n              className={`flex ${\r\n                message.role === 'user' \r\n                  ? 'justify-end' \r\n                  : message.role === 'system' \r\n                    ? 'justify-center' \r\n                    : 'justify-start'\r\n              }`}\r\n            >\r\n              <div\r\n                className={`max-w-[80%] rounded-lg p-3 ${\r\n                  message.role === 'user' \r\n                    ? 'bg-blue-500 text-white' \r\n                    : message.role === 'system'\r\n                      ? 'bg-gray-200 text-gray-600 text-sm'\r\n                      : 'bg-gray-100'\r\n                }`}\r\n              >\r\n                {message.content}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"p-4 border-t\">\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              placeholder={isServerConnected ? \"Type your message...\" : \"Connecting to Ollama server...\"}\r\n              disabled={isLoading || !isServerConnected}\r\n            />\r\n            <Button \r\n              type=\"submit\" \r\n              disabled={isLoading || !isServerConnected}\r\n              title={!isServerConnected ? \"Waiting for Ollama server connection\" : undefined}\r\n            >\r\n              {isLoading ? 'Sending...' : 'Send'}\r\n            </Button>\r\n          </div>\r\n          {!isServerConnected && !error && (\r\n            <Alert className=\"mt-4\">\r\n              <AlertTitle>Connecting...</AlertTitle>\r\n              <AlertDescription>\r\n                Attempting to connect to Ollama server...\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}