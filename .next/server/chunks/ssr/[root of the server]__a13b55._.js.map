{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport function generateId(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,yNAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,SAAS,CAAC;QACvE,MAAM,IAAI,KAAK,MAAM,KAAK,KAAK;QAC/B,MAAM,IAAI,MAAM,MAAM,IAAK,IAAI,MAAM;QACrC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'default' | 'outline' | 'ghost';\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant = 'default', ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\r\n          {\r\n            \"bg-primary text-primary-foreground hover:bg-primary/90\": variant === 'default',\r\n            \"border border-input hover:bg-accent hover:text-accent-foreground\": variant === 'outline',\r\n            \"hover:bg-accent hover:text-accent-foreground\": variant === 'ghost',\r\n          },\r\n          \"h-10 py-2 px-4\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,uBAAS,4WAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAO,EAAE;IAC7C,qBACE,oZAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wQACA;YACE,0DAA0D,YAAY;YACtE,oEAAoE,YAAY;YAChF,gDAAgD,YAAY;QAC9D,GACA,kBACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,4WAAM,UAAU,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,oZAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/storage/db.ts"],"sourcesContent":["import { openDB } from 'idb';\r\nimport { nanoid } from 'nanoid';\r\nimport { Message, Conversation, ModelContext } from './types';\r\n\r\nexport class StorageManager {\r\n  private async initDB() {\r\n    return openDB('chat-db', 1, {\r\n      upgrade(db) {\r\n        // Create stores if they don't exist\r\n        if (!db.objectStoreNames.contains('conversations')) {\r\n          db.createObjectStore('conversations', { keyPath: 'id' });\r\n        }\r\n        if (!db.objectStoreNames.contains('messages')) {\r\n          const messageStore = db.createObjectStore('messages', { keyPath: 'id' });\r\n          messageStore.createIndex('byConversation', 'conversationId');\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveMessage(message: Message) {\r\n    const db = await this.initDB();\r\n    await db.put('messages', message);\r\n    \r\n    // Update conversation timestamp\r\n    const tx = db.transaction('conversations', 'readwrite');\r\n    const store = tx.objectStore('conversations');\r\n    const conversation = await store.get(message.conversationId);\r\n    if (conversation) {\r\n      conversation.updatedAt = Date.now();\r\n      await store.put(conversation);\r\n    }\r\n  }\r\n\r\n  async getMessages(conversationId: string): Promise<Message[]> {\r\n    const db = await this.initDB();\r\n    return db.getAllFromIndex('messages', 'byConversation', conversationId);\r\n  }\r\n\r\n  // Alias for getMessages to maintain compatibility\r\n  async getConversationMessages(conversationId: string): Promise<Message[]> {\r\n    return this.getMessages(conversationId);\r\n  }\r\n\r\n  async createConversation(title: string, models: { responder: string; listener: string }): Promise<string> {\r\n    const db = await this.initDB();\r\n    const conversation: Conversation = {\r\n      id: nanoid(),\r\n      title,\r\n      models: {\r\n        responder: models.responder,\r\n        listener: models.listener,\r\n        contexts: {} // Initialize empty contexts object\r\n      },\r\n      createdAt: Date.now(),\r\n      updatedAt: Date.now()\r\n    };\r\n    await db.put('conversations', conversation);\r\n    return conversation.id;\r\n  }\r\n\r\n  async updateModelContext(\r\n    conversationId: string,\r\n    modelName: string,\r\n    context: Partial<ModelContext>\r\n  ) {\r\n    const db = await this.initDB();\r\n    const tx = db.transaction('conversations', 'readwrite');\r\n    const store = tx.objectStore('conversations');\r\n    \r\n    const conversation = await store.get(conversationId);\r\n    if (!conversation) {\r\n      throw new Error('Conversation not found');\r\n    }\r\n\r\n    // Ensure the contexts object exists\r\n    if (!conversation.models.contexts) {\r\n      conversation.models.contexts = {};\r\n    }\r\n\r\n    // Get existing context or create new one\r\n    const existingContext = conversation.models.contexts[modelName] || {\r\n      understanding: '',\r\n      lastUpdated: 0,\r\n      messagesSeen: []\r\n    };\r\n\r\n    // Merge the new context with existing context and ensure lastUpdated is set\r\n    const updatedContext: ModelContext = {\r\n      ...existingContext,\r\n      ...context,\r\n      lastUpdated: context.lastUpdated || Date.now() // Use provided lastUpdated or current timestamp\r\n    };\r\n\r\n    // Update the context for this model\r\n    conversation.models.contexts[modelName] = updatedContext;\r\n    conversation.updatedAt = Date.now();\r\n\r\n    await store.put(conversation);\r\n  }\r\n}\r\n\r\nexport const storage = new StorageManager();\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,MAAM;IACX,MAAc,SAAS;QACrB,OAAO,CAAA,GAAA,qLAAA,CAAA,SAAM,AAAD,EAAE,WAAW,GAAG;YAC1B,SAAQ,EAAE;gBACR,oCAAoC;gBACpC,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,kBAAkB;oBAClD,GAAG,iBAAiB,CAAC,iBAAiB;wBAAE,SAAS;oBAAK;gBACxD;gBACA,IAAI,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,aAAa;oBAC7C,MAAM,eAAe,GAAG,iBAAiB,CAAC,YAAY;wBAAE,SAAS;oBAAK;oBACtE,aAAa,WAAW,CAAC,kBAAkB;gBAC7C;YACF;QACF;IACF;IAEA,MAAM,YAAY,OAAgB,EAAE;QAClC,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,GAAG,GAAG,CAAC,YAAY;QAEzB,gCAAgC;QAChC,MAAM,KAAK,GAAG,WAAW,CAAC,iBAAiB;QAC3C,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,eAAe,MAAM,MAAM,GAAG,CAAC,QAAQ,cAAc;QAC3D,IAAI,cAAc;YAChB,aAAa,SAAS,GAAG,KAAK,GAAG;YACjC,MAAM,MAAM,GAAG,CAAC;QAClB;IACF;IAEA,MAAM,YAAY,cAAsB,EAAsB;QAC5D,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,OAAO,GAAG,eAAe,CAAC,YAAY,kBAAkB;IAC1D;IAEA,kDAAkD;IAClD,MAAM,wBAAwB,cAAsB,EAAsB;QACxE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B;IAEA,MAAM,mBAAmB,KAAa,EAAE,MAA+C,EAAmB;QACxG,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,eAA6B;YACjC,IAAI,CAAA,GAAA,kMAAA,CAAA,SAAM,AAAD;YACT;YACA,QAAQ;gBACN,WAAW,OAAO,SAAS;gBAC3B,UAAU,OAAO,QAAQ;gBACzB,UAAU,CAAC,EAAE,mCAAmC;YAClD;YACA,WAAW,KAAK,GAAG;YACnB,WAAW,KAAK,GAAG;QACrB;QACA,MAAM,GAAG,GAAG,CAAC,iBAAiB;QAC9B,OAAO,aAAa,EAAE;IACxB;IAEA,MAAM,mBACJ,cAAsB,EACtB,SAAiB,EACjB,OAA8B,EAC9B;QACA,MAAM,KAAK,MAAM,IAAI,CAAC,MAAM;QAC5B,MAAM,KAAK,GAAG,WAAW,CAAC,iBAAiB;QAC3C,MAAM,QAAQ,GAAG,WAAW,CAAC;QAE7B,MAAM,eAAe,MAAM,MAAM,GAAG,CAAC;QACrC,IAAI,CAAC,cAAc;YACjB,MAAM,IAAI,MAAM;QAClB;QAEA,oCAAoC;QACpC,IAAI,CAAC,aAAa,MAAM,CAAC,QAAQ,EAAE;YACjC,aAAa,MAAM,CAAC,QAAQ,GAAG,CAAC;QAClC;QAEA,yCAAyC;QACzC,MAAM,kBAAkB,aAAa,MAAM,CAAC,QAAQ,CAAC,UAAU,IAAI;YACjE,eAAe;YACf,aAAa;YACb,cAAc,EAAE;QAClB;QAEA,4EAA4E;QAC5E,MAAM,iBAA+B;YACnC,GAAG,eAAe;YAClB,GAAG,OAAO;YACV,aAAa,QAAQ,WAAW,IAAI,KAAK,GAAG,GAAG,gDAAgD;QACjG;QAEA,oCAAoC;QACpC,aAAa,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG;QAC1C,aAAa,SAAS,GAAG,KAAK,GAAG;QAEjC,MAAM,MAAM,GAAG,CAAC;IAClB;AACF;AAEO,MAAM,UAAU,IAAI"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/error-handler.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\ninterface ErrorConfig {\r\n  maxRetries: number;\r\n  timeout: number;\r\n  backoffFactor: number;\r\n}\r\n\r\nexport class ErrorHandler {\r\n  private config: ErrorConfig = {\r\n    maxRetries: 3,\r\n    timeout: 300000, // 5 minutes\r\n    backoffFactor: 1.5\r\n  };\r\n\r\n  async withRecovery<T>(operation: () => Promise<T>): Promise<T> {\r\n    let attempts = 0;\r\n    let lastError: Error | null = null;\r\n\r\n    while (attempts < this.config.maxRetries) {\r\n      try {\r\n        return await operation();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        attempts++;\r\n\r\n        if (this.isRecoverable(error)) {\r\n          await this.handleRecoverableError(error, attempts);\r\n          continue;\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    throw this.createFinalError(lastError, attempts);\r\n  }\r\n\r\n  private isRecoverable(error: any): boolean {\r\n    // Network related errors\r\n    if (error instanceof TypeError && error.message.includes('fetch')) {\r\n      return true;\r\n    }\r\n\r\n    // HTTP errors that might be temporary\r\n    if (error.status === 429 || // Too Many Requests\r\n        error.status === 503 || // Service Unavailable\r\n        error.status === 504) { // Gateway Timeout\r\n      return true;\r\n    }\r\n\r\n    // Ollama specific errors\r\n    if (error.message?.includes('MODEL_LOAD') || // Model loading issue\r\n        error.message?.includes('connection') || // Connection issues\r\n        error.message?.includes('timeout')) {    // Timeout issues\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private async handleRecoverableError(error: any, attempt: number) {\r\n    // Calculate delay with exponential backoff\r\n    const delay = Math.min(\r\n      1000 * Math.pow(this.config.backoffFactor, attempt),\r\n      30000 // Max 30 seconds\r\n    );\r\n\r\n    console.log(`Retrying operation after ${delay}ms (attempt ${attempt}/${this.config.maxRetries})`);\r\n    console.error('Error details:', error);\r\n\r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n  }\r\n\r\n  private createFinalError(error: Error | null, attempts: number): Error {\r\n    return new Error(\r\n      `Operation failed after ${attempts} attempts. Last error: ${error?.message || 'Unknown error'}`\r\n    );\r\n  }\r\n}\r\n\r\n// API error handler for Next.js API routes\r\nexport function handleApiError(error: unknown) {\r\n  console.error('API Error:', error);\r\n  \r\n  if (error instanceof Error) {\r\n    return NextResponse.json(\r\n      { error: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n\r\n  return NextResponse.json(\r\n    { error: 'Internal server error' },\r\n    { status: 500 }\r\n  );\r\n}\r\n\r\n// Export a default instance\r\nexport const errorHandler = new ErrorHandler();"],"names":[],"mappings":";;;;;AAAA;;AAQO,MAAM;IACH,SAAsB;QAC5B,YAAY;QACZ,SAAS;QACT,eAAe;IACjB,EAAE;IAEF,MAAM,aAAgB,SAA2B,EAAc;QAC7D,IAAI,WAAW;QACf,IAAI,YAA0B;QAE9B,MAAO,WAAW,IAAI,CAAC,MAAM,CAAC,UAAU,CAAE;YACxC,IAAI;gBACF,OAAO,MAAM;YACf,EAAE,OAAO,OAAO;gBACd,YAAY;gBACZ;gBAEA,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ;oBAC7B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO;oBACzC;gBACF;gBAEA;YACF;QACF;QAEA,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW;IACzC;IAEQ,cAAc,KAAU,EAAW;QACzC,yBAAyB;QACzB,IAAI,iBAAiB,aAAa,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU;YACjE,OAAO;QACT;QAEA,sCAAsC;QACtC,IAAI,MAAM,MAAM,KAAK,OAAO,oBAAoB;QAC5C,MAAM,MAAM,KAAK,OAAO,sBAAsB;QAC9C,MAAM,MAAM,KAAK,KAAK;YACxB,OAAO;QACT;QAEA,yBAAyB;QACzB,IAAI,MAAM,OAAO,EAAE,SAAS,iBAAiB,sBAAsB;QAC/D,MAAM,OAAO,EAAE,SAAS,iBAAiB,oBAAoB;QAC7D,MAAM,OAAO,EAAE,SAAS,YAAY;YACtC,OAAO;QACT;QAEA,OAAO;IACT;IAEA,MAAc,uBAAuB,KAAU,EAAE,OAAe,EAAE;QAChE,2CAA2C;QAC3C,MAAM,QAAQ,KAAK,GAAG,CACpB,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,UAC3C,MAAM,iBAAiB;;QAGzB,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,MAAM,YAAY,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAChG,QAAQ,KAAK,CAAC,kBAAkB;QAEhC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;IACnD;IAEQ,iBAAiB,KAAmB,EAAE,QAAgB,EAAS;QACrE,OAAO,IAAI,MACT,CAAC,uBAAuB,EAAE,SAAS,uBAAuB,EAAE,OAAO,WAAW,iBAAiB;IAEnG;AACF;AAGO,SAAS,eAAe,KAAc;IAC3C,QAAQ,KAAK,CAAC,cAAc;IAE5B,IAAI,iBAAiB,OAAO;QAC1B,OAAO,oSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO;QAAC,GACvB;YAAE,QAAQ;QAAI;IAElB;IAEA,OAAO,oSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;QAAE,OAAO;IAAwB,GACjC;QAAE,QAAQ;IAAI;AAElB;AAGO,MAAM,eAAe,IAAI"}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/ollama/client.ts"],"sourcesContent":["import type { ChatMessage } from './types';\r\nimport { errorHandler } from '../error-handler';\r\n\r\nexport class OllamaClient {\r\n  async chat({ messages, model }: { messages: ChatMessage[]; model?: string }) {\r\n    return errorHandler.withRecovery(async () => {\r\n      const response = await fetch('/api/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          model: model || 'deepseek-r1:14b',\r\n          messages: messages,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      // If response isn't ok, get the error details\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        const error = new Error(`Ollama error: ${errorData.error || response.statusText}`);\r\n        // Add additional properties to help with error recovery decisions\r\n        (error as any).status = response.status;\r\n        (error as any).statusText = response.statusText;\r\n        (error as any).details = errorData;\r\n        throw error;\r\n      }\r\n\r\n      const data = await response.json();\r\n      return {\r\n        content: data.message?.content || ''\r\n      };\r\n    });\r\n  }\r\n\r\n  async testConnection(model: string = 'deepseek-r1:14b') {\r\n    return errorHandler.withRecovery(async () => {\r\n      const response = await fetch('/api/test-connection');\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok || !data.success) {\r\n        const error = new Error('Connection test failed');\r\n        (error as any).status = response.status;\r\n        (error as any).details = data;\r\n        throw error;\r\n      }\r\n      \r\n      return true;\r\n    }).catch(error => {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    });\r\n  }\r\n}\r\n\r\n// Export a default instance\r\nexport const ollamaClient = new OllamaClient();\r\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM;IACX,MAAM,KAAK,EAAE,QAAQ,EAAE,KAAK,EAA+C,EAAE;QAC3E,OAAO,8HAAA,CAAA,eAAY,CAAC,YAAY,CAAC;YAC/B,MAAM,WAAW,MAAM,MAAM,aAAa;gBACxC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO,SAAS;oBAChB,UAAU;oBACV,QAAQ;gBACV;YACF;YAEA,8CAA8C;YAC9C,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,QAAQ,IAAI,MAAM,CAAC,cAAc,EAAE,UAAU,KAAK,IAAI,SAAS,UAAU,EAAE;gBACjF,kEAAkE;gBACjE,MAAc,MAAM,GAAG,SAAS,MAAM;gBACtC,MAAc,UAAU,GAAG,SAAS,UAAU;gBAC9C,MAAc,OAAO,GAAG;gBACzB,MAAM;YACR;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,OAAO;gBACL,SAAS,KAAK,OAAO,EAAE,WAAW;YACpC;QACF;IACF;IAEA,MAAM,eAAe,QAAgB,iBAAiB,EAAE;QACtD,OAAO,8HAAA,CAAA,eAAY,CAAC,YAAY,CAAC;YAC/B,MAAM,WAAW,MAAM,MAAM;YAC7B,MAAM,OAAO,MAAM,SAAS,IAAI;YAEhC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,OAAO,EAAE;gBACjC,MAAM,QAAQ,IAAI,MAAM;gBACvB,MAAc,MAAM,GAAG,SAAS,MAAM;gBACtC,MAAc,OAAO,GAAG;gBACzB,MAAM;YACR;YAEA,OAAO;QACT,GAAG,KAAK,CAAC,CAAA;YACP,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;QACT;IACF;AACF;AAGO,MAAM,eAAe,IAAI"}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/context/context-manager.ts"],"sourcesContent":["import { Message } from '../storage/types';\r\n\r\n/**\r\n * Represents a context window for managing conversation history\r\n */\r\ninterface ContextWindow {\r\n  maxTokens: number;\r\n  recentMessages: Message[];\r\n  summaries: string[];\r\n}\r\n\r\n/**\r\n * Manages conversation context and handles automatic summarization\r\n * to maintain context within token limits while preserving important information\r\n */\r\nexport class ContextManager {\r\n  private contextWindow: ContextWindow = {\r\n    maxTokens: 4096, // DeepSeek's context limit\r\n    recentMessages: [],\r\n    summaries: []\r\n  };\r\n\r\n  /**\r\n   * Updates the context with a new message and response\r\n   * @param message The new message to add to context\r\n   * @param response The model's response string\r\n   * @returns Current context state including messages and summaries\r\n   */\r\n  async updateContext(message: Message, response: string) {\r\n    // Add new messages to context\r\n    this.contextWindow.recentMessages.push(message);\r\n    \r\n    // Add model response as a message\r\n    const responseMessage: Message = {\r\n      id: `resp-${Date.now()}`,\r\n      conversationId: message.conversationId,\r\n      role: 'assistant',\r\n      content: response,\r\n      timestamp: Date.now(),\r\n      model: 'deepseek-r1:14b' // TODO: Make this configurable\r\n    };\r\n    this.contextWindow.recentMessages.push(responseMessage);\r\n    \r\n    // If context getting too large, summarize older messages\r\n    if (this.shouldSummarize()) {\r\n      await this.summarizeOldMessages();\r\n    }\r\n\r\n    return {\r\n      messages: this.contextWindow.recentMessages,\r\n      summaries: this.contextWindow.summaries\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Summarizes older messages to maintain context window size\r\n   */\r\n  private async summarizeOldMessages() {\r\n    const oldMessages = this.contextWindow.recentMessages.slice(0, -5);\r\n    const summary = await this.getSummary(oldMessages);\r\n    \r\n    // Store summary and keep only recent messages\r\n    this.contextWindow.summaries.push(summary);\r\n    this.contextWindow.recentMessages = this.contextWindow.recentMessages.slice(-5);\r\n  }\r\n\r\n  /**\r\n   * Determines if the context window needs summarization\r\n   * @returns boolean indicating if summarization is needed\r\n   */\r\n  private shouldSummarize(): boolean {\r\n    // Estimate token count (rough approximation)\r\n    const totalTokens = this.contextWindow.recentMessages.reduce(\r\n      (sum, msg) => sum + msg.content.length / 4, 0\r\n    );\r\n    return totalTokens > this.contextWindow.maxTokens * 0.8;\r\n  }\r\n\r\n  /**\r\n   * Generates a summary of the provided messages using Ollama\r\n   * @param messages Messages to summarize\r\n   * @returns Generated summary string\r\n   */\r\n  private async getSummary(messages: Message[]): Promise<string> {\r\n    // Use Ollama to generate summary\r\n    const content = messages.map(m => \r\n      `${m.role}: ${m.content}`\r\n    ).join('\\n');\r\n\r\n    const response = await fetch('http://localhost:11434/api/generate', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        model: 'deepseek-r1:14b',\r\n        prompt: `Summarize this conversation:\\n${content}`,\r\n        stream: false\r\n      })\r\n    });\r\n\r\n    const result = await response.json();\r\n    return result.response;\r\n  }\r\n\r\n  /**\r\n   * Gets the current context state\r\n   * @returns Current messages and summaries\r\n   */\r\n  getContext() {\r\n    return {\r\n      messages: this.contextWindow.recentMessages,\r\n      summaries: this.contextWindow.summaries\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clears the context window\r\n   */\r\n  clearContext() {\r\n    this.contextWindow.recentMessages = [];\r\n    this.contextWindow.summaries = [];\r\n  }\r\n}"],"names":[],"mappings":";;;AAeO,MAAM;IACH,gBAA+B;QACrC,WAAW;QACX,gBAAgB,EAAE;QAClB,WAAW,EAAE;IACf,EAAE;IAEF;;;;;GAKC,GACD,MAAM,cAAc,OAAgB,EAAE,QAAgB,EAAE;QACtD,8BAA8B;QAC9B,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC;QAEvC,kCAAkC;QAClC,MAAM,kBAA2B;YAC/B,IAAI,CAAC,KAAK,EAAE,KAAK,GAAG,IAAI;YACxB,gBAAgB,QAAQ,cAAc;YACtC,MAAM;YACN,SAAS;YACT,WAAW,KAAK,GAAG;YACnB,OAAO,kBAAkB,+BAA+B;QAC1D;QACA,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC;QAEvC,yDAAyD;QACzD,IAAI,IAAI,CAAC,eAAe,IAAI;YAC1B,MAAM,IAAI,CAAC,oBAAoB;QACjC;QAEA,OAAO;YACL,UAAU,IAAI,CAAC,aAAa,CAAC,cAAc;YAC3C,WAAW,IAAI,CAAC,aAAa,CAAC,SAAS;QACzC;IACF;IAEA;;GAEC,GACD,MAAc,uBAAuB;QACnC,MAAM,cAAc,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC;QAChE,MAAM,UAAU,MAAM,IAAI,CAAC,UAAU,CAAC;QAEtC,8CAA8C;QAC9C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC/E;IAEA;;;GAGC,GACD,AAAQ,kBAA2B;QACjC,6CAA6C;QAC7C,MAAM,cAAc,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,CAC1D,CAAC,KAAK,MAAQ,MAAM,IAAI,OAAO,CAAC,MAAM,GAAG,GAAG;QAE9C,OAAO,cAAc,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG;IACtD;IAEA;;;;GAIC,GACD,MAAc,WAAW,QAAmB,EAAmB;QAC7D,iCAAiC;QACjC,MAAM,UAAU,SAAS,GAAG,CAAC,CAAA,IAC3B,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EACzB,IAAI,CAAC;QAEP,MAAM,WAAW,MAAM,MAAM,uCAAuC;YAClE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP,QAAQ,CAAC,8BAA8B,EAAE,SAAS;gBAClD,QAAQ;YACV;QACF;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,OAAO,OAAO,QAAQ;IACxB;IAEA;;;GAGC,GACD,aAAa;QACX,OAAO;YACL,UAAU,IAAI,CAAC,aAAa,CAAC,cAAc;YAC3C,WAAW,IAAI,CAAC,aAAa,CAAC,SAAS;QACzC;IACF;IAEA;;GAEC,GACD,eAAe;QACb,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,EAAE;QACtC,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE;IACnC;AACF"}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/chat-panel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport { storage } from '../lib/storage/db';\r\nimport { ollamaClient } from '../lib/ollama/client';\r\nimport type { Message } from '../lib/storage/types';\r\nimport { ContextManager } from '../lib/context/context-manager';\r\n\r\nexport function ChatPanel() {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [conversationId, setConversationId] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const contextManager = useRef<ContextManager>(new ContextManager());\r\n\r\n  // Initialize conversation if needed\r\n  useEffect(() => {\r\n    async function init() {\r\n      if (!conversationId) {\r\n        const newId = await storage.createConversation('New Chat', {\r\n          responder: 'deepseek-r1:14b',\r\n          listener: 'qwen2.5-coder'\r\n        });\r\n        setConversationId(newId);\r\n      }\r\n      \r\n      // Load existing messages\r\n      if (conversationId) {\r\n        const existingMessages = await storage.getMessages(conversationId);\r\n        setMessages(existingMessages);\r\n        \r\n        // Initialize context with existing messages\r\n        for (const message of existingMessages) {\r\n          await contextManager.current.updateContext(\r\n            message,\r\n            message.role === 'assistant' ? message.content : ''\r\n          );\r\n        }\r\n      }\r\n    }\r\n    init();\r\n  }, [conversationId]);\r\n\r\n  async function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!input.trim() || isLoading || !conversationId) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // Save user message\r\n      const userMessage: Message = {\r\n        id: nanoid(),\r\n        content: input,\r\n        role: 'user',\r\n        timestamp: Date.now(),\r\n        conversationId\r\n      };\r\n      await storage.saveMessage(userMessage);\r\n      setMessages(prev => [...prev, userMessage]);\r\n      setInput('');\r\n\r\n      // Get current context for the chat\r\n      const context = contextManager.current.getContext();\r\n      const contextMessages = [\r\n        // Add summaries as system messages\r\n        ...context.summaries.map(summary => ({\r\n          role: 'system' as const,\r\n          content: `Previous conversation summary: ${summary}`\r\n        })),\r\n        // Add recent messages\r\n        ...context.messages.map(msg => ({\r\n          role: msg.role as 'user' | 'assistant' | 'system',\r\n          content: msg.content\r\n        })),\r\n        // Add current message\r\n        { role: 'user' as const, content: input }\r\n      ];\r\n\r\n      // Get model response with context\r\n      const response = await ollamaClient.chat({\r\n        messages: contextMessages,\r\n        model: 'deepseek-r1:14b'\r\n      });\r\n      \r\n      // Save model response\r\n      const assistantMessage: Message = {\r\n        id: nanoid(),\r\n        content: response.content,\r\n        role: 'assistant',\r\n        timestamp: Date.now(),\r\n        conversationId,\r\n        model: 'deepseek-r1:14b'\r\n      };\r\n      await storage.saveMessage(assistantMessage);\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n\r\n      // Update context with new messages\r\n      const updatedContext = await contextManager.current.updateContext(\r\n        userMessage,\r\n        response.content\r\n      );\r\n\r\n      // Update model context in storage\r\n      await storage.updateModelContext(conversationId, 'deepseek-r1:14b', {\r\n        understanding: updatedContext.summaries.join('\\n'),\r\n        messagesSeen: messages.map(m => parseInt(m.id)).filter(id => !isNaN(id))\r\n      });\r\n    } catch (error) {\r\n      console.error('Chat error:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex-1 overflow-auto p-4\">\r\n        {messages.map(message => (\r\n          <div key={message.id} className={`mb-4 ${\r\n            message.role === 'user' ? 'text-right' : 'text-left'\r\n          }`}>\r\n            <div className={`inline-block p-3 rounded-lg ${\r\n              message.role === 'user' \r\n                ? 'bg-blue-500 text-white' \r\n                : 'bg-gray-100'\r\n            }`}>\r\n              {message.content}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"p-4 border-t\">\r\n        <div className=\"flex gap-2\">\r\n          <Input\r\n            value={input}\r\n            onChange={e => setInput(e.target.value)}\r\n            placeholder=\"Type a message...\"\r\n            disabled={isLoading}\r\n          />\r\n          <Button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Sending...' : 'Send'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 633, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/app/page.tsx"],"sourcesContent":["import { ChatPanel } from '../components/chat-panel';\n\nexport default function Home() {\n  return (\n    <main className=\"flex h-screen\">\n      <div className=\"flex-1 flex\">\n        {/* Left side - Resource/URL handling (later) */}\n        <div className=\"w-[600px] border-r bg-white\">\n          <div className=\"p-4\">\n            Future URL/Resource Input\n          </div>\n        </div>\n\n        {/* Right side - Chat */}\n        <div className=\"flex-1\">\n          <ChatPanel />\n        </div>\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,oZAAC;QAAK,WAAU;kBACd,cAAA,oZAAC;YAAI,WAAU;;8BAEb,oZAAC;oBAAI,WAAU;8BACb,cAAA,oZAAC;wBAAI,WAAU;kCAAM;;;;;;;;;;;8BAMvB,oZAAC;oBAAI,WAAU;8BACb,cAAA,oZAAC,mIAAA,CAAA,YAAS;;;;;;;;;;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}