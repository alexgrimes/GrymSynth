{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/storage/db.ts"],"sourcesContent":["import { Conversation, Message } from './types';\r\n\r\nexport class StorageManager {\r\n  private dbName = 'chatApp';\r\n  private version = 1;\r\n\r\n  // We use a class to manage database operations because it helps us keep\r\n  // all database logic in one place and maintain a consistent connection\r\n  async initDB(): Promise<IDBDatabase> {\r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(this.dbName, this.version);\r\n\r\n      // This creates our database structure when it's first opened\r\n      request.onupgradeneeded = (event) => {\r\n        const db = (event.target as IDBOpenDBRequest).result;\r\n        \r\n        // Store for overall conversation metadata\r\n        if (!db.objectStoreNames.contains('conversations')) {\r\n          const conversationStore = db.createObjectStore('conversations', { keyPath: 'id' });\r\n          // Create indexes to help us search and sort conversations\r\n          conversationStore.createIndex('updatedAt', 'updatedAt');\r\n          conversationStore.createIndex('title', 'title');\r\n        }\r\n\r\n        // Store for individual messages within conversations\r\n        if (!db.objectStoreNames.contains('messages')) {\r\n          const messageStore = db.createObjectStore('messages', { keyPath: 'id' });\r\n          // Index to quickly fetch all messages for a conversation\r\n          messageStore.createIndex('conversationId', 'conversationId');\r\n          messageStore.createIndex('timestamp', 'timestamp');\r\n        }\r\n      };\r\n\r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => resolve(request.result);\r\n    });\r\n  }\r\n\r\n  // Conversation management methods\r\n  async createConversation(title: string, models: { responder: string; listener: string }): Promise<string> {\r\n    const db = await this.initDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(['conversations'], 'readwrite');\r\n      const store = transaction.objectStore('conversations');\r\n      \r\n      const conversation: Conversation = {\r\n        id: crypto.randomUUID(),\r\n        title,\r\n        createdAt: Date.now(),\r\n        updatedAt: Date.now(),\r\n        models\r\n      };\r\n\r\n      const request = store.add(conversation);\r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => resolve(conversation.id);\r\n    });\r\n  }\r\n\r\n  async saveMessage(message: Message): Promise<void> {\r\n    const db = await this.initDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(['messages', 'conversations'], 'readwrite');\r\n      \r\n      // Save the message\r\n      const messageStore = transaction.objectStore('messages');\r\n      messageStore.add(message);\r\n\r\n      // Update the conversation's updatedAt timestamp\r\n      const conversationStore = transaction.objectStore('conversations');\r\n      const getConversation = conversationStore.get(message.conversationId);\r\n      \r\n      getConversation.onsuccess = () => {\r\n        const conversation = getConversation.result;\r\n        conversation.updatedAt = Date.now();\r\n        conversationStore.put(conversation);\r\n      };\r\n\r\n      transaction.oncomplete = () => resolve();\r\n      transaction.onerror = () => reject(transaction.error);\r\n    });\r\n  }\r\n\r\n  // Retrieval methods with useful filters and sorting\r\n  async getConversations(): Promise<Conversation[]> {\r\n    const db = await this.initDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(['conversations'], 'readonly');\r\n      const store = transaction.objectStore('conversations');\r\n      const index = store.index('updatedAt');\r\n      \r\n      // Get conversations sorted by most recently updated\r\n      const request = index.getAll();\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        const conversations = request.result;\r\n        resolve(conversations.sort((a, b) => b.updatedAt - a.updatedAt));\r\n      };\r\n    });\r\n  }\r\n\r\n  async getConversationMessages(conversationId: string): Promise<Message[]> {\r\n    const db = await this.initDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction(['messages'], 'readonly');\r\n      const store = transaction.objectStore('messages');\r\n      const index = store.index('conversationId');\r\n      \r\n      const request = index.getAll(IDBKeyRange.only(conversationId));\r\n      \r\n      request.onerror = () => reject(request.error);\r\n      request.onsuccess = () => {\r\n        const messages = request.result;\r\n        resolve(messages.sort((a, b) => a.timestamp - b.timestamp));\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nexport const storage = new StorageManager();\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/ollama/simple-chat.ts"],"sourcesContent":["export class ChatManager {\r\n  async sendMessage(message: string) {\r\n    console.log('Attempting to connect to Ollama...');\r\n    \r\n    try {\r\n      // First test connection\r\n      const testResponse = await fetch('http://localhost:11434/api/version');\r\n      console.log('Ollama connection test:', testResponse.ok);\r\n      \r\n      if (!testResponse.ok) {\r\n        throw new Error('Could not connect to Ollama server. Please ensure Ollama is running.');\r\n      }\r\n\r\n      const versionData = await testResponse.json();\r\n      console.log('Ollama version:', versionData);\r\n      \r\n      console.log('Making chat request...');\r\n      const response = await fetch('http://localhost:11434/api/generate', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          model: 'deepseek-r1:14b',\r\n          prompt: message,\r\n          stream: false\r\n        })\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Response error:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          error: errorText\r\n        });\r\n        throw new Error(`Failed to get response: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Response data:', data);\r\n      return data.response;\r\n    } catch (error) {\r\n      console.error('Detailed connection error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAO,MAAM;IACX,MAAM,YAAY,OAAe,EAAE;QACjC,QAAQ,GAAG,CAAC;QAEZ,IAAI;YACF,wBAAwB;YACxB,MAAM,eAAe,MAAM,MAAM;YACjC,QAAQ,GAAG,CAAC,2BAA2B,aAAa,EAAE;YAEtD,IAAI,CAAC,aAAa,EAAE,EAAE;gBACpB,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,cAAc,MAAM,aAAa,IAAI;YAC3C,QAAQ,GAAG,CAAC,mBAAmB;YAE/B,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,MAAM,MAAM,uCAAuC;gBAClE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBACnB,OAAO;oBACP,QAAQ;oBACR,QAAQ;gBACV;YACF;YAEA,QAAQ,GAAG,CAAC,oBAAoB,SAAS,MAAM;YAE/C,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,QAAQ,KAAK,CAAC,mBAAmB;oBAC/B,QAAQ,SAAS,MAAM;oBACvB,YAAY,SAAS,UAAU;oBAC/B,OAAO;gBACT;gBACA,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW;YAC7E;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,kBAAkB;YAC9B,OAAO,KAAK,QAAQ;QACtB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;AACF"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport function generateId(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,yNAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,SAAS,CAAC;QACvE,MAAM,IAAI,KAAK,MAAM,KAAK,KAAK;QAC/B,MAAM,IAAI,MAAM,MAAM,IAAK,IAAI,MAAM;QACrC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF"}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: 'default' | 'outline' | 'ghost';\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant = 'default', ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(\r\n          \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\r\n          {\r\n            \"bg-primary text-primary-foreground hover:bg-primary/90\": variant === 'default',\r\n            \"border border-input hover:bg-accent hover:text-accent-foreground\": variant === 'outline',\r\n            \"hover:bg-accent hover:text-accent-foreground\": variant === 'ghost',\r\n          },\r\n          \"h-10 py-2 px-4\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,uBAAS,4WAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAO,EAAE;IAC7C,qBACE,oZAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wQACA;YACE,0DAA0D,YAAY;YACtE,oEAAoE,YAAY;YAChF,gDAAgD,YAAY;QAC9D,GACA,kBACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cn } from \"../../lib/utils\";\r\n\r\nexport interface InputProps\r\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\r\n\r\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\r\n  ({ className, type, ...props }, ref) => {\r\n    return (\r\n      <input\r\n        type={type}\r\n        className={cn(\r\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nInput.displayName = \"Input\";\r\n\r\nexport { Input };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,4WAAM,UAAU,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,oZAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gWACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/components/chat-panel.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { storage } from '../lib/storage/db';\r\nimport { ChatManager } from '../lib/ollama/simple-chat';\r\nimport { Button } from './ui/button';\r\nimport { Input } from './ui/input';\r\nimport type { Message, Conversation } from '../lib/storage/types';\r\n\r\nexport function ChatPanel() {\r\n  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const chat = new ChatManager();\r\n\r\n  // When the component mounts, we'll either create a new conversation\r\n  // or load the most recent one\r\n  useEffect(() => {\r\n    async function initializeChat() {\r\n      try {\r\n        // First try to get the most recent conversation\r\n        const conversations = await storage.getConversations();\r\n        let conversation: Conversation;\r\n\r\n        if (conversations.length === 0) {\r\n          // If no conversations exist, create a new one\r\n          const conversationId = await storage.createConversation('New Chat', {\r\n            responder: 'deepseek-r1:14b',\r\n            listener: 'qwen' // We'll use this later for role switching\r\n          });\r\n          conversation = await storage.getConversations().then(convs => convs[0]);\r\n        } else {\r\n          // Use the most recent conversation\r\n          conversation = conversations[0];\r\n        }\r\n\r\n        setCurrentConversation(conversation);\r\n        \r\n        // Load this conversation's messages\r\n        const conversationMessages = await storage.getConversationMessages(conversation.id);\r\n        setMessages(conversationMessages);\r\n      } catch (error) {\r\n        console.error('Failed to initialize chat:', error);\r\n        // We could add error UI feedback here\r\n      }\r\n    }\r\n\r\n    initializeChat();\r\n  }, []);\r\n\r\n  async function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!input.trim() || isLoading || !currentConversation) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // First, save the user's message and update the UI\r\n      const userMessage: Message = {\r\n        id: crypto.randomUUID(),\r\n        conversationId: currentConversation.id,\r\n        role: 'user',\r\n        content: input,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      await storage.saveMessage(userMessage);\r\n      setMessages(prev => [...prev, userMessage]);\r\n      setInput(''); // Clear input after sending\r\n\r\n      // Then get the AI's response\r\n      const response = await chat.sendMessage(input);\r\n\r\n      // Save and display the AI's response\r\n      const assistantMessage: Message = {\r\n        id: crypto.randomUUID(),\r\n        conversationId: currentConversation.id,\r\n        role: 'assistant',\r\n        content: response,\r\n        timestamp: Date.now(),\r\n        model: currentConversation.models.responder // Track which model responded\r\n      };\r\n\r\n      await storage.saveMessage(assistantMessage);\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n    } catch (error) {\r\n      console.error('Failed to process message:', error);\r\n      // We could show an error message to the user here\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex-1 overflow-auto p-4 space-y-4\">\r\n        {messages.map((message) => (\r\n          <div\r\n            key={message.id}\r\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\r\n          >\r\n            <div\r\n              className={`max-w-[80%] rounded-lg p-3 ${\r\n                message.role === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-100'\r\n              }`}\r\n            >\r\n              {message.content}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"p-4 border-t\">\r\n        <div className=\"flex gap-2\">\r\n          <Input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type your message...\"\r\n            disabled={isLoading}\r\n          />\r\n          <Button type=\"submit\" disabled={isLoading}>\r\n            {isLoading ? 'Sending...' : 'Send'}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/app/page.tsx"],"sourcesContent":["import { ChatPanel } from '../components/chat-panel';\n\nexport default function Home() {\n  return (\n    <main className=\"flex h-screen\">\n      <div className=\"flex-1 flex\">\n        {/* Left side - Resource/URL handling (later) */}\n        <div className=\"w-[600px] border-r bg-white\">\n          <div className=\"p-4\">\n            Future URL/Resource Input\n          </div>\n        </div>\n\n        {/* Right side - Chat */}\n        <div className=\"flex-1\">\n          <ChatPanel />\n        </div>\n      </div>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,oZAAC;QAAK,WAAU;kBACd,cAAA,oZAAC;YAAI,WAAU;;8BAEb,oZAAC;oBAAI,WAAU;8BACb,cAAA,oZAAC;wBAAI,WAAU;kCAAM;;;;;;;;;;;8BAMvB,oZAAC;oBAAI,WAAU;8BACb,cAAA,oZAAC,mIAAA,CAAA,YAAS;;;;;;;;;;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}