{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/app/api/test-connection/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport http from 'http';\r\n\r\nconst OLLAMA_HOST = '127.0.0.1';\r\nconst OLLAMA_PORT = 11434;\r\n\r\nfunction makeRequest(path: string, method = 'GET', body?: any): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    const options = {\r\n      hostname: OLLAMA_HOST,\r\n      port: OLLAMA_PORT,\r\n      path,\r\n      method,\r\n      headers: body ? { 'Content-Type': 'application/json' } : undefined,\r\n      family: 4 // Force IPv4\r\n    };\r\n\r\n    const req = http.request(options, (res) => {\r\n      let data = '';\r\n      res.on('data', chunk => data += chunk);\r\n      res.on('end', () => {\r\n        if (res.statusCode === 200) {\r\n          try {\r\n            resolve(JSON.parse(data));\r\n          } catch {\r\n            resolve(data);\r\n          }\r\n        } else {\r\n          reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));\r\n        }\r\n      });\r\n    });\r\n\r\n    req.on('error', reject);\r\n\r\n    if (body) {\r\n      req.write(JSON.stringify(body));\r\n    }\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport async function OPTIONS() {\r\n  return NextResponse.json({}, {\r\n    headers: {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n    }\r\n  });\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    console.log('Checking Ollama server connection...');\r\n    \r\n    // Test server connection\r\n    const version = await makeRequest('/api/version');\r\n    console.log('Ollama version:', version);\r\n\r\n    // Get list of available models\r\n    const models = await makeRequest('/api/tags');\r\n    const modelNames = models.models?.map((m: any) => m.name) || [];\r\n    console.log('Available models:', modelNames);\r\n\r\n    // Check if required models are available\r\n    const hasDeepseek = modelNames.includes('deepseek-r1:14b');\r\n    const hasQwen = modelNames.includes('qwen2.5-coder:latest');\r\n\r\n    if (!hasDeepseek || !hasQwen) {\r\n      const missingModels = [];\r\n      if (!hasDeepseek) missingModels.push('deepseek-r1:14b');\r\n      if (!hasQwen) missingModels.push('qwen2.5-coder:latest');\r\n\r\n      return NextResponse.json(\r\n        { \r\n          error: `Missing required models: ${missingModels.join(', ')}. Please install them using 'ollama pull' command.`\r\n        },\r\n        {\r\n          status: 503,\r\n          headers: {\r\n            'Access-Control-Allow-Origin': '*',\r\n            'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n            'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      models: modelNames\r\n    }, {\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Connection test failed:', error);\r\n    \r\n    return NextResponse.json(\r\n      { \r\n        error: `Failed to connect to Ollama at ${OLLAMA_HOST}:${OLLAMA_PORT}. ` +\r\n               'Please ensure Ollama is running and accepting connections.'\r\n      },\r\n      { \r\n        status: 503,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,cAAc;AACpB,MAAM,cAAc;AAEpB,SAAS,YAAY,IAAY,EAAE,SAAS,KAAK,EAAE,IAAU;IAC3D,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,UAAU;YACd,UAAU;YACV,MAAM;YACN;YACA;YACA,SAAS,OAAO;gBAAE,gBAAgB;YAAmB,IAAI;YACzD,QAAQ,EAAE,aAAa;QACzB;QAEA,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACjC,IAAI,OAAO;YACX,IAAI,EAAE,CAAC,QAAQ,CAAA,QAAS,QAAQ;YAChC,IAAI,EAAE,CAAC,OAAO;gBACZ,IAAI,IAAI,UAAU,KAAK,KAAK;oBAC1B,IAAI;wBACF,QAAQ,KAAK,KAAK,CAAC;oBACrB,EAAE,OAAM;wBACN,QAAQ;oBACV;gBACF,OAAO;oBACL,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC,EAAE,EAAE,IAAI,aAAa,EAAE;gBACjE;YACF;QACF;QAEA,IAAI,EAAE,CAAC,SAAS;QAEhB,IAAI,MAAM;YACR,IAAI,KAAK,CAAC,KAAK,SAAS,CAAC;QAC3B;QACA,IAAI,GAAG;IACT;AACF;AAEO,eAAe;IACpB,OAAO,sSAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;QAC3B,SAAS;YACP,+BAA+B;YAC/B,gCAAgC;YAChC,gCAAgC;QAClC;IACF;AACF;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,yBAAyB;QACzB,MAAM,UAAU,MAAM,YAAY;QAClC,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,+BAA+B;QAC/B,MAAM,SAAS,MAAM,YAAY;QACjC,MAAM,aAAa,OAAO,MAAM,EAAE,IAAI,CAAC,IAAW,EAAE,IAAI,KAAK,EAAE;QAC/D,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,yCAAyC;QACzC,MAAM,cAAc,WAAW,QAAQ,CAAC;QACxC,MAAM,UAAU,WAAW,QAAQ,CAAC;QAEpC,IAAI,CAAC,eAAe,CAAC,SAAS;YAC5B,MAAM,gBAAgB,EAAE;YACxB,IAAI,CAAC,aAAa,cAAc,IAAI,CAAC;YACrC,IAAI,CAAC,SAAS,cAAc,IAAI,CAAC;YAEjC,OAAO,sSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO,CAAC,yBAAyB,EAAE,cAAc,IAAI,CAAC,MAAM,kDAAkD,CAAC;YACjH,GACA;gBACE,QAAQ;gBACR,SAAS;oBACP,+BAA+B;oBAC/B,gCAAgC;oBAChC,gCAAgC;gBAClC;YACF;QAEJ;QAEA,OAAO,sSAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ;QACV,GAAG;YACD,SAAS;gBACP,+BAA+B;gBAC/B,gCAAgC;gBAChC,gCAAgC;YAClC;QACF;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B;QAEzC,OAAO,sSAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,CAAC,+BAA+B,EAAE,YAAY,CAAC,EAAE,YAAY,EAAE,CAAC,GAChE;QACT,GACA;YACE,QAAQ;YACR,SAAS;gBACP,+BAA+B;gBAC/B,gCAAgC;gBAChC,gCAAgC;YAClC;QACF;IAEJ;AACF"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}