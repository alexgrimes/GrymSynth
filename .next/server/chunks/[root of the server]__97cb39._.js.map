{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/app/api/process/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { Resource } from '@shared/types';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { url } = await request.json();\r\n    \r\n    // Configure fetch with timeout and headers\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 8000);\r\n    \r\n    const response = await fetch(url, {\r\n      signal: controller.signal,\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n        'Accept-Language': 'en-US,en;q=0.9'\r\n      }\r\n    });\r\n    \r\n    clearTimeout(timeoutId);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Website returned ${response.status} status`);\r\n    }\r\n\r\n    const content = await response.text();\r\n\r\n    // Verify Ollama model exists\r\n    const modelCheck = await fetch('http://127.0.0.1:11434/api/tags');\r\n    if (!modelCheck.ok) throw new Error('Ollama server unavailable');\r\n    \r\n    const { models } = await modelCheck.json();\r\n    if (!models.some((m: any) => m.name === process.env.OLLAMA_MODEL)) {\r\n      throw new Error(`Model ${process.env.OLLAMA_MODEL} not found`);\r\n    }\r\n\r\n    // Process through Ollama\r\n    const ollamaResponse = await fetch('http://127.0.0.1:11434/api/generate', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        model: process.env.OLLAMA_MODEL,\r\n        prompt: `Analyze this web content:\\n\\n${content.substring(0, 5000)}`, // Limit input size\r\n        stream: false,\r\n      }),\r\n    });\r\n\r\n    const result = await ollamaResponse.json();\r\n    return NextResponse.json({\r\n      url,\r\n      response: result.response,\r\n      timestamp: Date.now()\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    console.error('Processing error:', error);\r\n    return NextResponse.json(\r\n      { error: error.message || 'Processing failed' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,IAAI;QAElC,2CAA2C;QAC3C,MAAM,aAAa,IAAI;QACvB,MAAM,YAAY,WAAW,IAAM,WAAW,KAAK,IAAI;QAEvD,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ,WAAW,MAAM;YACzB,SAAS;gBACP,cAAc;gBACd,UAAU;gBACV,mBAAmB;YACrB;QACF;QAEA,aAAa;QAEb,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,SAAS,MAAM,CAAC,OAAO,CAAC;QAC9D;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,6BAA6B;QAC7B,MAAM,aAAa,MAAM,MAAM;QAC/B,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,MAAM;QAEpC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,WAAW,IAAI;QACxC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,IAAW,EAAE,IAAI,KAAK,QAAQ,GAAG,CAAC,YAAY,GAAG;YACjE,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,QAAQ,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC;QAC/D;QAEA,yBAAyB;QACzB,MAAM,iBAAiB,MAAM,MAAM,uCAAuC;YACxE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO,QAAQ,GAAG,CAAC,YAAY;gBAC/B,QAAQ,CAAC,6BAA6B,EAAE,QAAQ,SAAS,CAAC,GAAG,OAAO;gBACpE,QAAQ;YACV;QACF;QAEA,MAAM,SAAS,MAAM,eAAe,IAAI;QACxC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,UAAU,OAAO,QAAQ;YACzB,WAAW,KAAK,GAAG;QACrB;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAoB,GAC9C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}