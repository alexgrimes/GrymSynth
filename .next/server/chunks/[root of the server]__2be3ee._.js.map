{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/alex/testing-browser/audio-learning-hub/src/app/api/test-connection/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nconst OLLAMA_BASE_URL = process.env.OLLAMA_URL || 'http://127.0.0.1:11434';\r\n\r\ninterface TestResult {\r\n  success: boolean;\r\n  error?: string;\r\n  result?: any;\r\n}\r\n\r\nasync function testModel(model: string, maxRetries = 2): Promise<TestResult> {\r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      console.log(`Testing ${model} (attempt ${attempt + 1})...`);\r\n      const response = await fetch(`${OLLAMA_BASE_URL}/api/generate`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          model,\r\n          prompt: 'Say \"test\" if you can read this.',\r\n          stream: false,\r\n          raw: true\r\n        }),\r\n        signal: AbortSignal.timeout(45000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        let errorData;\r\n        try {\r\n          errorData = JSON.parse(errorText);\r\n        } catch {\r\n          errorData = { error: errorText };\r\n        }\r\n        console.error(`${model} test failed:`, {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          errorData\r\n        });\r\n        \r\n        if (errorData.error?.includes('no model found')) {\r\n          return {\r\n            success: false,\r\n            error: `Model ${model} is not installed. Please run 'ollama pull ${model}'`\r\n          };\r\n        }\r\n        \r\n        if (attempt < maxRetries) {\r\n          console.log(`Retrying ${model} test in 5 seconds...`);\r\n          await new Promise(resolve => setTimeout(resolve, 5000));\r\n          continue;\r\n        }\r\n        \r\n        return {\r\n          success: false,\r\n          error: `${model} test failed: ${errorData.error || response.statusText}`\r\n        };\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log(`${model} test succeeded:`, result);\r\n      return { success: true, result };\r\n    } catch (error: any) {\r\n      console.error(`${model} test error:`, {\r\n        error,\r\n        name: error.name,\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n      \r\n      if (attempt < maxRetries && error.name === 'TimeoutError') {\r\n        console.log(`Retrying ${model} test in 5 seconds...`);\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n        continue;\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.name === 'TimeoutError' \r\n          ? `${model} test timed out. The server might be overloaded.`\r\n          : `${model} test failed: ${error.message}`\r\n      };\r\n    }\r\n  }\r\n  \r\n  return {\r\n    success: false,\r\n    error: `${model} test failed after ${maxRetries + 1} attempts`\r\n  };\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    console.log('Checking Ollama server connection...');\r\n    const versionResponse = await fetch(`${OLLAMA_BASE_URL}/api/version`, {\r\n      signal: AbortSignal.timeout(5000)\r\n    });\r\n    \r\n    if (!versionResponse.ok) {\r\n      const errorText = await versionResponse.text();\r\n      let errorMessage = 'Unable to connect to Ollama server. Please ensure Ollama is running.';\r\n      \r\n      try {\r\n        const errorData = JSON.parse(errorText);\r\n        if (errorData.error) {\r\n          errorMessage = `Ollama server error: ${errorData.error}`;\r\n        }\r\n      } catch {\r\n        if (versionResponse.statusText) {\r\n          errorMessage = `Ollama server error: ${versionResponse.statusText}`;\r\n        }\r\n      }\r\n      \r\n      return NextResponse.json(\r\n        { error: errorMessage },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    const deepseekResult = await testModel('deepseek-r1:14b');\r\n    if (!deepseekResult.success) {\r\n      return NextResponse.json(\r\n        { error: deepseekResult.error },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    const qwenResult = await testModel('qwen2.5-coder');\r\n    if (!qwenResult.success) {\r\n      return NextResponse.json(\r\n        { error: qwenResult.error },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    console.log('Both model tests completed successfully');\r\n    return NextResponse.json({ \r\n      success: true,\r\n      deepseek: deepseekResult.result,\r\n      qwen: qwenResult.result\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Connection test failed:', {\r\n      error,\r\n      name: error.name,\r\n      message: error.message,\r\n      stack: error.stack\r\n    });\r\n    \r\n    if (error.name === 'TimeoutError') {\r\n      return NextResponse.json(\r\n        { error: 'Connection to Ollama server timed out. Please check if the server is running.' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n    \r\n    if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Unable to connect to Ollama server at ${OLLAMA_BASE_URL}. ` +\r\n                 'Please ensure Ollama is running and the URL is correct.' \r\n        },\r\n        { status: 503 }\r\n      );\r\n    }\r\n\r\n    if (error.cause?.code === 'ECONNREFUSED') {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Connection refused at ${OLLAMA_BASE_URL}. ` +\r\n                 'Please ensure Ollama is running and accepting connections.' \r\n        },\r\n        { status: 503 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json(\r\n      { error: error.message || 'Connection test failed' },\r\n      { status: 503 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}