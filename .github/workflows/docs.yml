name: Documentation Build

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint Markdown files
      run: markdownlint '**/*.md' --ignore node_modules
      continue-on-error: true

    - name: Check for broken links
      run: |
        npm install -g markdown-link-check
        find . -name "*.md" -not -path "./node_modules/*" -exec markdown-link-check {} \;
      continue-on-error: true

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install -g docsify-cli
        npm install -g mermaid-filter

    - name: Setup documentation structure
      run: |
        mkdir -p docs-build
        cp -r docs/* docs-build/

        # Create index.html if it doesn't exist
        if [ ! -f docs-build/index.html ]; then
          cat > docs-build/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Audio Learning Hub Documentation</title>
          <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
          <meta name="description" content="Audio Learning Hub Documentation">
          <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
          <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/docsify@4/lib/themes/vue.css">
        </head>
        <body>
          <div id="app"></div>
          <script>
            window.$docsify = {
              name: 'Audio Learning Hub',
              repo: 'https://github.com/yourusername/audio-learning-hub',
              loadSidebar: true,
              subMaxLevel: 3,
              auto2top: true,
              search: {
                maxAge: 86400000,
                paths: 'auto',
                placeholder: 'Search',
                noData: 'No Results!',
                depth: 6
              }
            }
          </script>
          <script src="//cdn.jsdelivr.net/npm/docsify@4"></script>
          <script src="//cdn.jsdelivr.net/npm/docsify/lib/plugins/search.min.js"></script>
          <script src="//cdn.jsdelivr.net/npm/docsify-copy-code/dist/docsify-copy-code.min.js"></script>
          <script src="//cdn.jsdelivr.net/npm/prismjs@1/components/prism-bash.min.js"></script>
          <script src="//cdn.jsdelivr.net/npm/prismjs@1/components/prism-typescript.min.js"></script>
          <script src="//cdn.jsdelivr.net/npm/prismjs@1/components/prism-json.min.js"></script>
          <script src="//cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
          <script>
            mermaid.initialize({ startOnLoad: true });
          </script>
        </body>
        </html>
        EOF
        fi

        # Create _sidebar.md if it doesn't exist
        if [ ! -f docs-build/_sidebar.md ]; then
          echo "# Documentation" > docs-build/_sidebar.md
          echo "" >> docs-build/_sidebar.md
          echo "* [Home](README.md)" >> docs-build/_sidebar.md
          echo "* [System Overview](SYSTEM-OVERVIEW.md)" >> docs-build/_sidebar.md
          echo "* [User Guide](USER-GUIDE.md)" >> docs-build/_sidebar.md
          echo "* [API Reference](API-REFERENCE.md)" >> docs-build/_sidebar.md
          echo "* [Developer Guide](DEVELOPER-GUIDE.md)" >> docs-build/_sidebar.md

          # Add other documentation files
          find docs -name "*.md" -not -path "*/\.*" | sort | while read -r file; do
            filename=$(basename "$file")
            if [[ "$filename" != "README.md" && "$filename" != "SYSTEM-OVERVIEW.md" && "$filename" != "USER-GUIDE.md" && "$filename" != "API-REFERENCE.md" && "$filename" != "DEVELOPER-GUIDE.md" ]]; then
              title=$(head -n 1 "$file" | sed 's/^# //')
              echo "* [$title]($filename)" >> docs-build/_sidebar.md
            fi
          done
        fi

    - name: Process Markdown files
      run: |
        # Process mermaid diagrams
        find docs-build -name "*.md" -exec sh -c 'cat {} | mermaid-filter > {}.tmp && mv {}.tmp {}' \;

    - name: Build documentation site
      run: |
        cd docs-build
        docsify serve . &
        sleep 5
        curl -s http://localhost:3000 > /dev/null
        pkill -f "docsify serve"

    - name: Upload documentation site
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: docs-build/

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download documentation site
      uses: actions/download-artifact@v3
      with:
        name: documentation-site
        path: docs-build

    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: docs-build
        branch: gh-pages
        clean: true

    - name: Notify on documentation update
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: 'documentation'
        slack-message: "Documentation has been updated and deployed to GitHub Pages! :books: Check it out at https://yourusername.github.io/audio-learning-hub/"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  validate:
    name: Validate Documentation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Check deployed site
      run: |
        # Wait for GitHub Pages to update
        sleep 60

        # Check if the site is accessible
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://yourusername.github.io/audio-learning-hub/)

        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "Documentation site is accessible"
        else
          echo "::warning::Documentation site returned HTTP status $HTTP_STATUS"
        fi

    - name: Run accessibility check
      run: |
        npm install -g pa11y
        pa11y https://yourusername.github.io/audio-learning-hub/ --reporter json > accessibility-report.json
      continue-on-error: true

    - name: Upload accessibility report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report
        path: accessibility-report.json
        if-no-files-found: ignore
