import { ValidationResult, Pattern, StorageOptions, StorageOperationResult, SearchCriteria } from './types';
import { PatternValidator } from './pattern-validator';
export declare class PatternStorage {
    private patterns;
    private validator;
    private metrics;
    private healthMonitor;
    private cache;
    private validationCache;
    private persistenceQueue;
    private persistenceTimeout;
    private optimizationInterval;
    private healthCheckInterval;
    private readonly options;
    private featureIndices;
    constructor(options?: Partial<StorageOptions>, validator?: PatternValidator);
    private initializeStorage;
    store(pattern: Pattern): Promise<StorageOperationResult<ValidationResult>>;
    retrieve(id: string): Promise<StorageOperationResult<Pattern | null>>;
    search(criteria: SearchCriteria): Promise<StorageOperationResult<Pattern[]>>;
    private findCandidatesByIndices;
    private updateIndices;
    private removeFromIndices;
    private getIndexKey;
    private generateValidationCacheKey;
    private queueForPersistence;
    private flushPersistenceQueue;
    private persistBatch;
    private matchesCriteria;
    private matchMetadata;
    private matchFeatures;
    private compareValues;
    private optimize;
    private createCapacityError;
    private handleStorageError;
    private handleRetrievalError;
    private handleSearchError;
    private chunkArray;
    private wrapError;
    destroy(): void;
}
